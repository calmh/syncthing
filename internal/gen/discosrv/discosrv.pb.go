// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: discosrv/discosrv.proto

package discosrv

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatabaseRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []*DatabaseAddress     `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Seen          int64                  `protobuf:"varint,3,opt,name=seen,proto3" json:"seen,omitempty"` // Unix nanos, last device announce
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseRecord) Reset() {
	*x = DatabaseRecord{}
	mi := &file_discosrv_discosrv_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseRecord) ProtoMessage() {}

func (x *DatabaseRecord) ProtoReflect() protoreflect.Message {
	mi := &file_discosrv_discosrv_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseRecord.ProtoReflect.Descriptor instead.
func (*DatabaseRecord) Descriptor() ([]byte, []int) {
	return file_discosrv_discosrv_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseRecord) GetAddresses() []*DatabaseAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *DatabaseRecord) GetSeen() int64 {
	if x != nil {
		return x.Seen
	}
	return 0
}

type ReplicationRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // raw 32 byte device ID
	Addresses     []*DatabaseAddress     `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Seen          int64                  `protobuf:"varint,3,opt,name=seen,proto3" json:"seen,omitempty"` // Unix nanos, last device announce
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationRecord) Reset() {
	*x = ReplicationRecord{}
	mi := &file_discosrv_discosrv_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationRecord) ProtoMessage() {}

func (x *ReplicationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_discosrv_discosrv_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationRecord.ProtoReflect.Descriptor instead.
func (*ReplicationRecord) Descriptor() ([]byte, []int) {
	return file_discosrv_discosrv_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicationRecord) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ReplicationRecord) GetAddresses() []*DatabaseAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ReplicationRecord) GetSeen() int64 {
	if x != nil {
		return x.Seen
	}
	return 0
}

type DatabaseAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Expires       int64                  `protobuf:"varint,2,opt,name=expires,proto3" json:"expires,omitempty"` // Unix nanos
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseAddress) Reset() {
	*x = DatabaseAddress{}
	mi := &file_discosrv_discosrv_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseAddress) ProtoMessage() {}

func (x *DatabaseAddress) ProtoReflect() protoreflect.Message {
	mi := &file_discosrv_discosrv_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseAddress.ProtoReflect.Descriptor instead.
func (*DatabaseAddress) Descriptor() ([]byte, []int) {
	return file_discosrv_discosrv_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DatabaseAddress) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

var File_discosrv_discosrv_proto protoreflect.FileDescriptor

const file_discosrv_discosrv_proto_rawDesc = "" +
	"\n" +
	"\x17discosrv/discosrv.proto\x12\bdiscosrv\"]\n" +
	"\x0eDatabaseRecord\x127\n" +
	"\taddresses\x18\x01 \x03(\v2\x19.discosrv.DatabaseAddressR\taddresses\x12\x12\n" +
	"\x04seen\x18\x03 \x01(\x03R\x04seen\"r\n" +
	"\x11ReplicationRecord\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x127\n" +
	"\taddresses\x18\x02 \x03(\v2\x19.discosrv.DatabaseAddressR\taddresses\x12\x12\n" +
	"\x04seen\x18\x03 \x01(\x03R\x04seen\"E\n" +
	"\x0fDatabaseAddress\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x18\n" +
	"\aexpires\x18\x02 \x01(\x03R\aexpiresB\x93\x01\n" +
	"\fcom.discosrvB\rDiscosrvProtoP\x01Z4github.com/syncthing/syncthing/internal/gen/discosrv\xa2\x02\x03DXX\xaa\x02\bDiscosrv\xca\x02\bDiscosrv\xe2\x02\x14Discosrv\\GPBMetadata\xea\x02\bDiscosrvb\x06proto3"

var (
	file_discosrv_discosrv_proto_rawDescOnce sync.Once
	file_discosrv_discosrv_proto_rawDescData []byte
)

func file_discosrv_discosrv_proto_rawDescGZIP() []byte {
	file_discosrv_discosrv_proto_rawDescOnce.Do(func() {
		file_discosrv_discosrv_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_discosrv_discosrv_proto_rawDesc), len(file_discosrv_discosrv_proto_rawDesc)))
	})
	return file_discosrv_discosrv_proto_rawDescData
}

var file_discosrv_discosrv_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_discosrv_discosrv_proto_goTypes = []any{
	(*DatabaseRecord)(nil),    // 0: discosrv.DatabaseRecord
	(*ReplicationRecord)(nil), // 1: discosrv.ReplicationRecord
	(*DatabaseAddress)(nil),   // 2: discosrv.DatabaseAddress
}
var file_discosrv_discosrv_proto_depIdxs = []int32{
	2, // 0: discosrv.DatabaseRecord.addresses:type_name -> discosrv.DatabaseAddress
	2, // 1: discosrv.ReplicationRecord.addresses:type_name -> discosrv.DatabaseAddress
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_discosrv_discosrv_proto_init() }
func file_discosrv_discosrv_proto_init() {
	if File_discosrv_discosrv_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_discosrv_discosrv_proto_rawDesc), len(file_discosrv_discosrv_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_discosrv_discosrv_proto_goTypes,
		DependencyIndexes: file_discosrv_discosrv_proto_depIdxs,
		MessageInfos:      file_discosrv_discosrv_proto_msgTypes,
	}.Build()
	File_discosrv_discosrv_proto = out.File
	file_discosrv_discosrv_proto_goTypes = nil
	file_discosrv_discosrv_proto_depIdxs = nil
}
