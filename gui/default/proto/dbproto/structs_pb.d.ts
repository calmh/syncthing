// @generated by protoc-gen-es v2.2.5
// @generated from file dbproto/structs.proto (package dbproto, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { BlockInfo, FileInfoType, PlatformData, Vector } from "../bep/bep_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file dbproto/structs.proto.
 */
export declare const file_dbproto_structs: GenFile;

/**
 * Same as bep.FileInfo, but without blocks
 *
 * @generated from message dbproto.FileInfoTruncated
 */
export declare type FileInfoTruncated = Message<"dbproto.FileInfoTruncated"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: int64 size = 3;
   */
  size: bigint;

  /**
   * @generated from field: int64 modified_s = 5;
   */
  modifiedS: bigint;

  /**
   * @generated from field: uint64 modified_by = 12;
   */
  modifiedBy: bigint;

  /**
   * @generated from field: bep.Vector version = 9;
   */
  version?: Vector;

  /**
   * @generated from field: int64 sequence = 10;
   */
  sequence: bigint;

  /**
   * @generated from field: bytes symlink_target = 17;
   */
  symlinkTarget: Uint8Array;

  /**
   * @generated from field: bytes blocks_hash = 18;
   */
  blocksHash: Uint8Array;

  /**
   * @generated from field: bytes encrypted = 19;
   */
  encrypted: Uint8Array;

  /**
   * @generated from field: bep.FileInfoType type = 2;
   */
  type: FileInfoType;

  /**
   * @generated from field: uint32 permissions = 4;
   */
  permissions: number;

  /**
   * @generated from field: int32 modified_ns = 11;
   */
  modifiedNs: number;

  /**
   * @generated from field: int32 block_size = 13;
   */
  blockSize: number;

  /**
   * @generated from field: bep.PlatformData platform = 14;
   */
  platform?: PlatformData;

  /**
   * The local_flags fields stores flags that are relevant to the local
   * host only. It is not part of the protocol, doesn't get sent or
   * received (we make sure to zero it), nonetheless we need it on our
   * struct and to be able to serialize it to/from the database.
   *
   * @generated from field: uint32 local_flags = 1000;
   */
  localFlags: number;

  /**
   * The version_hash is an implementation detail and not part of the wire
   * format.
   *
   * @generated from field: bytes version_hash = 1001;
   */
  versionHash: Uint8Array;

  /**
   * The time when the inode was last changed (i.e., permissions, xattrs
   * etc changed). This is host-local, not sent over the wire.
   *
   * @generated from field: int64 inode_change_ns = 1002;
   */
  inodeChangeNs: bigint;

  /**
   * The size of the data appended to the encrypted file on disk. This is
   * host-local, not sent over the wire.
   *
   * @generated from field: int32 encryption_trailer_size = 1003;
   */
  encryptionTrailerSize: number;

  /**
   * @generated from field: bool deleted = 6;
   */
  deleted: boolean;

  /**
   * @generated from field: bool invalid = 7;
   */
  invalid: boolean;

  /**
   * @generated from field: bool no_permissions = 8;
   */
  noPermissions: boolean;
};

/**
 * Describes the message dbproto.FileInfoTruncated.
 * Use `create(FileInfoTruncatedSchema)` to create a new message.
 */
export declare const FileInfoTruncatedSchema: GenMessage<FileInfoTruncated>;

/**
 * @generated from message dbproto.FileVersion
 */
export declare type FileVersion = Message<"dbproto.FileVersion"> & {
  /**
   * @generated from field: bep.Vector version = 1;
   */
  version?: Vector;

  /**
   * @generated from field: bool deleted = 2;
   */
  deleted: boolean;

  /**
   * @generated from field: repeated bytes devices = 3;
   */
  devices: Uint8Array[];

  /**
   * @generated from field: repeated bytes invalid_devices = 4;
   */
  invalidDevices: Uint8Array[];
};

/**
 * Describes the message dbproto.FileVersion.
 * Use `create(FileVersionSchema)` to create a new message.
 */
export declare const FileVersionSchema: GenMessage<FileVersion>;

/**
 * @generated from message dbproto.VersionList
 */
export declare type VersionList = Message<"dbproto.VersionList"> & {
  /**
   * @generated from field: repeated dbproto.FileVersion versions = 1;
   */
  versions: FileVersion[];
};

/**
 * Describes the message dbproto.VersionList.
 * Use `create(VersionListSchema)` to create a new message.
 */
export declare const VersionListSchema: GenMessage<VersionList>;

/**
 * BlockList is the structure used to store block lists
 *
 * @generated from message dbproto.BlockList
 */
export declare type BlockList = Message<"dbproto.BlockList"> & {
  /**
   * @generated from field: repeated bep.BlockInfo blocks = 1;
   */
  blocks: BlockInfo[];
};

/**
 * Describes the message dbproto.BlockList.
 * Use `create(BlockListSchema)` to create a new message.
 */
export declare const BlockListSchema: GenMessage<BlockList>;

/**
 * IndirectionHashesOnly is used to only unmarshal the indirection hashes
 * from a FileInfo
 *
 * @generated from message dbproto.IndirectionHashesOnly
 */
export declare type IndirectionHashesOnly = Message<"dbproto.IndirectionHashesOnly"> & {
  /**
   * @generated from field: bytes blocks_hash = 18;
   */
  blocksHash: Uint8Array;

  /**
   * @generated from field: bytes version_hash = 1001;
   */
  versionHash: Uint8Array;
};

/**
 * Describes the message dbproto.IndirectionHashesOnly.
 * Use `create(IndirectionHashesOnlySchema)` to create a new message.
 */
export declare const IndirectionHashesOnlySchema: GenMessage<IndirectionHashesOnly>;

/**
 * For each folder and device we keep one of these to track the current
 * counts and sequence. We also keep one for the global state of the folder.
 *
 * @generated from message dbproto.Counts
 */
export declare type Counts = Message<"dbproto.Counts"> & {
  /**
   * @generated from field: int32 files = 1;
   */
  files: number;

  /**
   * @generated from field: int32 directories = 2;
   */
  directories: number;

  /**
   * @generated from field: int32 symlinks = 3;
   */
  symlinks: number;

  /**
   * @generated from field: int32 deleted = 4;
   */
  deleted: number;

  /**
   * @generated from field: int64 bytes = 5;
   */
  bytes: bigint;

  /**
   * zero for the global state
   *
   * @generated from field: int64 sequence = 6;
   */
  sequence: bigint;

  /**
   * device ID for remote devices, or special values for local/global
   *
   * @generated from field: bytes device_id = 17;
   */
  deviceId: Uint8Array;

  /**
   * the local flag for this count bucket
   *
   * @generated from field: uint32 local_flags = 18;
   */
  localFlags: number;
};

/**
 * Describes the message dbproto.Counts.
 * Use `create(CountsSchema)` to create a new message.
 */
export declare const CountsSchema: GenMessage<Counts>;

/**
 * @generated from message dbproto.CountsSet
 */
export declare type CountsSet = Message<"dbproto.CountsSet"> & {
  /**
   * @generated from field: repeated dbproto.Counts counts = 1;
   */
  counts: Counts[];

  /**
   * unix nanos
   *
   * @generated from field: int64 created = 2;
   */
  created: bigint;
};

/**
 * Describes the message dbproto.CountsSet.
 * Use `create(CountsSetSchema)` to create a new message.
 */
export declare const CountsSetSchema: GenMessage<CountsSet>;

/**
 * @generated from message dbproto.ObservedFolder
 */
export declare type ObservedFolder = Message<"dbproto.ObservedFolder"> & {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string label = 2;
   */
  label: string;

  /**
   * @generated from field: bool receive_encrypted = 3;
   */
  receiveEncrypted: boolean;

  /**
   * @generated from field: bool remote_encrypted = 4;
   */
  remoteEncrypted: boolean;
};

/**
 * Describes the message dbproto.ObservedFolder.
 * Use `create(ObservedFolderSchema)` to create a new message.
 */
export declare const ObservedFolderSchema: GenMessage<ObservedFolder>;

/**
 * @generated from message dbproto.ObservedDevice
 */
export declare type ObservedDevice = Message<"dbproto.ObservedDevice"> & {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string address = 3;
   */
  address: string;
};

/**
 * Describes the message dbproto.ObservedDevice.
 * Use `create(ObservedDeviceSchema)` to create a new message.
 */
export declare const ObservedDeviceSchema: GenMessage<ObservedDevice>;

