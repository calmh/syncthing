// @generated by protoc-gen-es v2.2.5
// @generated from file bep/bep.proto (package bep, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file bep/bep.proto.
 */
export declare const file_bep_bep: GenFile;

/**
 * @generated from message bep.Hello
 */
export declare type Hello = Message<"bep.Hello"> & {
  /**
   * @generated from field: string device_name = 1;
   */
  deviceName: string;

  /**
   * @generated from field: string client_name = 2;
   */
  clientName: string;

  /**
   * @generated from field: string client_version = 3;
   */
  clientVersion: string;

  /**
   * @generated from field: int32 num_connections = 4;
   */
  numConnections: number;

  /**
   * @generated from field: int64 timestamp = 5;
   */
  timestamp: bigint;
};

/**
 * Describes the message bep.Hello.
 * Use `create(HelloSchema)` to create a new message.
 */
export declare const HelloSchema: GenMessage<Hello>;

/**
 * @generated from message bep.Header
 */
export declare type Header = Message<"bep.Header"> & {
  /**
   * @generated from field: bep.MessageType type = 1;
   */
  type: MessageType;

  /**
   * @generated from field: bep.MessageCompression compression = 2;
   */
  compression: MessageCompression;
};

/**
 * Describes the message bep.Header.
 * Use `create(HeaderSchema)` to create a new message.
 */
export declare const HeaderSchema: GenMessage<Header>;

/**
 * @generated from message bep.ClusterConfig
 */
export declare type ClusterConfig = Message<"bep.ClusterConfig"> & {
  /**
   * @generated from field: repeated bep.Folder folders = 1;
   */
  folders: Folder[];

  /**
   * @generated from field: bool secondary = 2;
   */
  secondary: boolean;
};

/**
 * Describes the message bep.ClusterConfig.
 * Use `create(ClusterConfigSchema)` to create a new message.
 */
export declare const ClusterConfigSchema: GenMessage<ClusterConfig>;

/**
 * @generated from message bep.Folder
 */
export declare type Folder = Message<"bep.Folder"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string label = 2;
   */
  label: string;

  /**
   * @generated from field: bool read_only = 3;
   */
  readOnly: boolean;

  /**
   * @generated from field: bool ignore_permissions = 4;
   */
  ignorePermissions: boolean;

  /**
   * @generated from field: bool ignore_delete = 5;
   */
  ignoreDelete: boolean;

  /**
   * @generated from field: bool disable_temp_indexes = 6;
   */
  disableTempIndexes: boolean;

  /**
   * @generated from field: bool paused = 7;
   */
  paused: boolean;

  /**
   * @generated from field: repeated bep.Device devices = 16;
   */
  devices: Device[];
};

/**
 * Describes the message bep.Folder.
 * Use `create(FolderSchema)` to create a new message.
 */
export declare const FolderSchema: GenMessage<Folder>;

/**
 * @generated from message bep.Device
 */
export declare type Device = Message<"bep.Device"> & {
  /**
   * @generated from field: bytes id = 1;
   */
  id: Uint8Array;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: repeated string addresses = 3;
   */
  addresses: string[];

  /**
   * @generated from field: bep.Compression compression = 4;
   */
  compression: Compression;

  /**
   * @generated from field: string cert_name = 5;
   */
  certName: string;

  /**
   * @generated from field: int64 max_sequence = 6;
   */
  maxSequence: bigint;

  /**
   * @generated from field: bool introducer = 7;
   */
  introducer: boolean;

  /**
   * @generated from field: uint64 index_id = 8;
   */
  indexId: bigint;

  /**
   * @generated from field: bool skip_introduction_removals = 9;
   */
  skipIntroductionRemovals: boolean;

  /**
   * @generated from field: bytes encryption_password_token = 10;
   */
  encryptionPasswordToken: Uint8Array;
};

/**
 * Describes the message bep.Device.
 * Use `create(DeviceSchema)` to create a new message.
 */
export declare const DeviceSchema: GenMessage<Device>;

/**
 * @generated from message bep.Index
 */
export declare type Index = Message<"bep.Index"> & {
  /**
   * @generated from field: string folder = 1;
   */
  folder: string;

  /**
   * @generated from field: repeated bep.FileInfo files = 2;
   */
  files: FileInfo[];

  /**
   * the highest sequence in this batch
   *
   * @generated from field: int64 last_sequence = 3;
   */
  lastSequence: bigint;
};

/**
 * Describes the message bep.Index.
 * Use `create(IndexSchema)` to create a new message.
 */
export declare const IndexSchema: GenMessage<Index>;

/**
 * @generated from message bep.IndexUpdate
 */
export declare type IndexUpdate = Message<"bep.IndexUpdate"> & {
  /**
   * @generated from field: string folder = 1;
   */
  folder: string;

  /**
   * @generated from field: repeated bep.FileInfo files = 2;
   */
  files: FileInfo[];

  /**
   * the highest sequence in this batch
   *
   * @generated from field: int64 last_sequence = 3;
   */
  lastSequence: bigint;

  /**
   * the highest sequence in the previous batch
   *
   * @generated from field: int64 prev_sequence = 4;
   */
  prevSequence: bigint;
};

/**
 * Describes the message bep.IndexUpdate.
 * Use `create(IndexUpdateSchema)` to create a new message.
 */
export declare const IndexUpdateSchema: GenMessage<IndexUpdate>;

/**
 * The field ordering here optimizes for struct size / alignment --
 * large types come before smaller ones.
 *
 * @generated from message bep.FileInfo
 */
export declare type FileInfo = Message<"bep.FileInfo"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: int64 size = 3;
   */
  size: bigint;

  /**
   * @generated from field: int64 modified_s = 5;
   */
  modifiedS: bigint;

  /**
   * @generated from field: uint64 modified_by = 12;
   */
  modifiedBy: bigint;

  /**
   * @generated from field: bep.Vector version = 9;
   */
  version?: Vector;

  /**
   * @generated from field: int64 sequence = 10;
   */
  sequence: bigint;

  /**
   * @generated from field: repeated bep.BlockInfo blocks = 16;
   */
  blocks: BlockInfo[];

  /**
   * @generated from field: bytes symlink_target = 17;
   */
  symlinkTarget: Uint8Array;

  /**
   * @generated from field: bytes blocks_hash = 18;
   */
  blocksHash: Uint8Array;

  /**
   * @generated from field: bytes encrypted = 19;
   */
  encrypted: Uint8Array;

  /**
   * @generated from field: bep.FileInfoType type = 2;
   */
  type: FileInfoType;

  /**
   * @generated from field: uint32 permissions = 4;
   */
  permissions: number;

  /**
   * @generated from field: int32 modified_ns = 11;
   */
  modifiedNs: number;

  /**
   * @generated from field: int32 block_size = 13;
   */
  blockSize: number;

  /**
   * @generated from field: bep.PlatformData platform = 14;
   */
  platform?: PlatformData;

  /**
   * The local_flags fields stores flags that are relevant to the local
   * host only. It is not part of the protocol, doesn't get sent or
   * received (we make sure to zero it), nonetheless we need it on our
   * struct and to be able to serialize it to/from the database.
   *
   * @generated from field: uint32 local_flags = 1000;
   */
  localFlags: number;

  /**
   * The version_hash is an implementation detail and not part of the wire
   * format.
   *
   * @generated from field: bytes version_hash = 1001;
   */
  versionHash: Uint8Array;

  /**
   * The time when the inode was last changed (i.e., permissions, xattrs
   * etc changed). This is host-local, not sent over the wire.
   *
   * @generated from field: int64 inode_change_ns = 1002;
   */
  inodeChangeNs: bigint;

  /**
   * The size of the data appended to the encrypted file on disk. This is
   * host-local, not sent over the wire.
   *
   * @generated from field: int32 encryption_trailer_size = 1003;
   */
  encryptionTrailerSize: number;

  /**
   * @generated from field: bool deleted = 6;
   */
  deleted: boolean;

  /**
   * @generated from field: bool invalid = 7;
   */
  invalid: boolean;

  /**
   * @generated from field: bool no_permissions = 8;
   */
  noPermissions: boolean;
};

/**
 * Describes the message bep.FileInfo.
 * Use `create(FileInfoSchema)` to create a new message.
 */
export declare const FileInfoSchema: GenMessage<FileInfo>;

/**
 * @generated from message bep.BlockInfo
 */
export declare type BlockInfo = Message<"bep.BlockInfo"> & {
  /**
   * @generated from field: bytes hash = 3;
   */
  hash: Uint8Array;

  /**
   * @generated from field: int64 offset = 1;
   */
  offset: bigint;

  /**
   * @generated from field: int32 size = 2;
   */
  size: number;
};

/**
 * Describes the message bep.BlockInfo.
 * Use `create(BlockInfoSchema)` to create a new message.
 */
export declare const BlockInfoSchema: GenMessage<BlockInfo>;

/**
 * @generated from message bep.Vector
 */
export declare type Vector = Message<"bep.Vector"> & {
  /**
   * @generated from field: repeated bep.Counter counters = 1;
   */
  counters: Counter[];
};

/**
 * Describes the message bep.Vector.
 * Use `create(VectorSchema)` to create a new message.
 */
export declare const VectorSchema: GenMessage<Vector>;

/**
 * @generated from message bep.Counter
 */
export declare type Counter = Message<"bep.Counter"> & {
  /**
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: uint64 value = 2;
   */
  value: bigint;
};

/**
 * Describes the message bep.Counter.
 * Use `create(CounterSchema)` to create a new message.
 */
export declare const CounterSchema: GenMessage<Counter>;

/**
 * @generated from message bep.PlatformData
 */
export declare type PlatformData = Message<"bep.PlatformData"> & {
  /**
   * @generated from field: bep.UnixData unix = 1;
   */
  unix?: UnixData;

  /**
   * @generated from field: bep.WindowsData windows = 2;
   */
  windows?: WindowsData;

  /**
   * @generated from field: bep.XattrData linux = 3;
   */
  linux?: XattrData;

  /**
   * @generated from field: bep.XattrData darwin = 4;
   */
  darwin?: XattrData;

  /**
   * @generated from field: bep.XattrData freebsd = 5;
   */
  freebsd?: XattrData;

  /**
   * @generated from field: bep.XattrData netbsd = 6;
   */
  netbsd?: XattrData;
};

/**
 * Describes the message bep.PlatformData.
 * Use `create(PlatformDataSchema)` to create a new message.
 */
export declare const PlatformDataSchema: GenMessage<PlatformData>;

/**
 * @generated from message bep.UnixData
 */
export declare type UnixData = Message<"bep.UnixData"> & {
  /**
   * The owner name and group name are set when known (i.e., could be
   * resolved on the source device), while the UID and GID are always set
   * as they come directly from the stat() call.
   *
   * @generated from field: string owner_name = 1;
   */
  ownerName: string;

  /**
   * @generated from field: string group_name = 2;
   */
  groupName: string;

  /**
   * @generated from field: int32 uid = 3;
   */
  uid: number;

  /**
   * @generated from field: int32 gid = 4;
   */
  gid: number;
};

/**
 * Describes the message bep.UnixData.
 * Use `create(UnixDataSchema)` to create a new message.
 */
export declare const UnixDataSchema: GenMessage<UnixData>;

/**
 * @generated from message bep.WindowsData
 */
export declare type WindowsData = Message<"bep.WindowsData"> & {
  /**
   * Windows file objects have a single owner, which may be a user or a
   * group. We keep the name of that account, and a flag to indicate what
   * type it is.
   *
   * @generated from field: string owner_name = 1;
   */
  ownerName: string;

  /**
   * @generated from field: bool owner_is_group = 2;
   */
  ownerIsGroup: boolean;
};

/**
 * Describes the message bep.WindowsData.
 * Use `create(WindowsDataSchema)` to create a new message.
 */
export declare const WindowsDataSchema: GenMessage<WindowsData>;

/**
 * @generated from message bep.XattrData
 */
export declare type XattrData = Message<"bep.XattrData"> & {
  /**
   * @generated from field: repeated bep.Xattr xattrs = 1;
   */
  xattrs: Xattr[];
};

/**
 * Describes the message bep.XattrData.
 * Use `create(XattrDataSchema)` to create a new message.
 */
export declare const XattrDataSchema: GenMessage<XattrData>;

/**
 * @generated from message bep.Xattr
 */
export declare type Xattr = Message<"bep.Xattr"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: bytes value = 2;
   */
  value: Uint8Array;
};

/**
 * Describes the message bep.Xattr.
 * Use `create(XattrSchema)` to create a new message.
 */
export declare const XattrSchema: GenMessage<Xattr>;

/**
 * @generated from message bep.Request
 */
export declare type Request = Message<"bep.Request"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: string folder = 2;
   */
  folder: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: int64 offset = 4;
   */
  offset: bigint;

  /**
   * @generated from field: int32 size = 5;
   */
  size: number;

  /**
   * @generated from field: bytes hash = 6;
   */
  hash: Uint8Array;

  /**
   * @generated from field: bool from_temporary = 7;
   */
  fromTemporary: boolean;

  /**
   * @generated from field: int32 block_no = 9;
   */
  blockNo: number;
};

/**
 * Describes the message bep.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export declare const RequestSchema: GenMessage<Request>;

/**
 * @generated from message bep.Response
 */
export declare type Response = Message<"bep.Response"> & {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * @generated from field: bep.ErrorCode code = 3;
   */
  code: ErrorCode;
};

/**
 * Describes the message bep.Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export declare const ResponseSchema: GenMessage<Response>;

/**
 * @generated from message bep.DownloadProgress
 */
export declare type DownloadProgress = Message<"bep.DownloadProgress"> & {
  /**
   * @generated from field: string folder = 1;
   */
  folder: string;

  /**
   * @generated from field: repeated bep.FileDownloadProgressUpdate updates = 2;
   */
  updates: FileDownloadProgressUpdate[];
};

/**
 * Describes the message bep.DownloadProgress.
 * Use `create(DownloadProgressSchema)` to create a new message.
 */
export declare const DownloadProgressSchema: GenMessage<DownloadProgress>;

/**
 * @generated from message bep.FileDownloadProgressUpdate
 */
export declare type FileDownloadProgressUpdate = Message<"bep.FileDownloadProgressUpdate"> & {
  /**
   * @generated from field: bep.FileDownloadProgressUpdateType update_type = 1;
   */
  updateType: FileDownloadProgressUpdateType;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: bep.Vector version = 3;
   */
  version?: Vector;

  /**
   * @generated from field: repeated int32 block_indexes = 4 [packed = false];
   */
  blockIndexes: number[];

  /**
   * @generated from field: int32 block_size = 5;
   */
  blockSize: number;
};

/**
 * Describes the message bep.FileDownloadProgressUpdate.
 * Use `create(FileDownloadProgressUpdateSchema)` to create a new message.
 */
export declare const FileDownloadProgressUpdateSchema: GenMessage<FileDownloadProgressUpdate>;

/**
 * @generated from message bep.Ping
 */
export declare type Ping = Message<"bep.Ping"> & {
};

/**
 * Describes the message bep.Ping.
 * Use `create(PingSchema)` to create a new message.
 */
export declare const PingSchema: GenMessage<Ping>;

/**
 * @generated from message bep.Close
 */
export declare type Close = Message<"bep.Close"> & {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;
};

/**
 * Describes the message bep.Close.
 * Use `create(CloseSchema)` to create a new message.
 */
export declare const CloseSchema: GenMessage<Close>;

/**
 * @generated from enum bep.MessageType
 */
export enum MessageType {
  /**
   * @generated from enum value: MESSAGE_TYPE_CLUSTER_CONFIG = 0;
   */
  CLUSTER_CONFIG = 0,

  /**
   * @generated from enum value: MESSAGE_TYPE_INDEX = 1;
   */
  INDEX = 1,

  /**
   * @generated from enum value: MESSAGE_TYPE_INDEX_UPDATE = 2;
   */
  INDEX_UPDATE = 2,

  /**
   * @generated from enum value: MESSAGE_TYPE_REQUEST = 3;
   */
  REQUEST = 3,

  /**
   * @generated from enum value: MESSAGE_TYPE_RESPONSE = 4;
   */
  RESPONSE = 4,

  /**
   * @generated from enum value: MESSAGE_TYPE_DOWNLOAD_PROGRESS = 5;
   */
  DOWNLOAD_PROGRESS = 5,

  /**
   * @generated from enum value: MESSAGE_TYPE_PING = 6;
   */
  PING = 6,

  /**
   * @generated from enum value: MESSAGE_TYPE_CLOSE = 7;
   */
  CLOSE = 7,
}

/**
 * Describes the enum bep.MessageType.
 */
export declare const MessageTypeSchema: GenEnum<MessageType>;

/**
 * @generated from enum bep.MessageCompression
 */
export enum MessageCompression {
  /**
   * @generated from enum value: MESSAGE_COMPRESSION_NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: MESSAGE_COMPRESSION_LZ4 = 1;
   */
  LZ4 = 1,
}

/**
 * Describes the enum bep.MessageCompression.
 */
export declare const MessageCompressionSchema: GenEnum<MessageCompression>;

/**
 * @generated from enum bep.Compression
 */
export enum Compression {
  /**
   * @generated from enum value: COMPRESSION_METADATA = 0;
   */
  METADATA = 0,

  /**
   * @generated from enum value: COMPRESSION_NEVER = 1;
   */
  NEVER = 1,

  /**
   * @generated from enum value: COMPRESSION_ALWAYS = 2;
   */
  ALWAYS = 2,
}

/**
 * Describes the enum bep.Compression.
 */
export declare const CompressionSchema: GenEnum<Compression>;

/**
 * @generated from enum bep.FileInfoType
 */
export enum FileInfoType {
  /**
   * @generated from enum value: FILE_INFO_TYPE_FILE = 0;
   */
  FILE = 0,

  /**
   * @generated from enum value: FILE_INFO_TYPE_DIRECTORY = 1;
   */
  DIRECTORY = 1,

  /**
   * @generated from enum value: FILE_INFO_TYPE_SYMLINK_FILE = 2 [deprecated = true];
   * @deprecated
   */
  SYMLINK_FILE = 2,

  /**
   * @generated from enum value: FILE_INFO_TYPE_SYMLINK_DIRECTORY = 3 [deprecated = true];
   * @deprecated
   */
  SYMLINK_DIRECTORY = 3,

  /**
   * @generated from enum value: FILE_INFO_TYPE_SYMLINK = 4;
   */
  SYMLINK = 4,
}

/**
 * Describes the enum bep.FileInfoType.
 */
export declare const FileInfoTypeSchema: GenEnum<FileInfoType>;

/**
 * @generated from enum bep.ErrorCode
 */
export enum ErrorCode {
  /**
   * @generated from enum value: ERROR_CODE_NO_ERROR = 0;
   */
  NO_ERROR = 0,

  /**
   * @generated from enum value: ERROR_CODE_GENERIC = 1;
   */
  GENERIC = 1,

  /**
   * @generated from enum value: ERROR_CODE_NO_SUCH_FILE = 2;
   */
  NO_SUCH_FILE = 2,

  /**
   * @generated from enum value: ERROR_CODE_INVALID_FILE = 3;
   */
  INVALID_FILE = 3,
}

/**
 * Describes the enum bep.ErrorCode.
 */
export declare const ErrorCodeSchema: GenEnum<ErrorCode>;

/**
 * @generated from enum bep.FileDownloadProgressUpdateType
 */
export enum FileDownloadProgressUpdateType {
  /**
   * @generated from enum value: FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_APPEND = 0;
   */
  APPEND = 0,

  /**
   * @generated from enum value: FILE_DOWNLOAD_PROGRESS_UPDATE_TYPE_FORGET = 1;
   */
  FORGET = 1,
}

/**
 * Describes the enum bep.FileDownloadProgressUpdateType.
 */
export declare const FileDownloadProgressUpdateTypeSchema: GenEnum<FileDownloadProgressUpdateType>;

